{
  "contractName": "FinalizableCrowdsale",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "hasClosed",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "rate",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "weiRaised",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOpen",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "closingTime",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "wallet",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "rate",
          "type": "uint256"
        },
        {
          "name": "wallet",
          "type": "address"
        },
        {
          "name": "token",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "openingTime",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "openingTime",
          "type": "uint256"
        },
        {
          "name": "closingTime",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "buyTokens",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "CrowdsaleFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "purchaser",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensPurchased",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "finalized",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "finalize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b50610ecc806100206000396000f3fe6080604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631515bc2b146100db5780632c4e722e1461010a5780634042b66f1461013557806347535d7b146101605780634b6753bc1461018f5780634bb278f3146101ba578063521eb273146101d15780638129fc1c14610228578063b3f05b971461023f578063b4988fd01461026e578063b7a8807c146102e9578063e4a3011614610314578063ec8ac4d814610359578063fc0c546a1461039d575b6100d9336103f4565b005b3480156100e757600080fd5b506100f06104ec565b604051808215151515815260200191505060405180910390f35b34801561011657600080fd5b5061011f6104f8565b6040518082815260200191505060405180910390f35b34801561014157600080fd5b5061014a610502565b6040518082815260200191505060405180910390f35b34801561016c57600080fd5b5061017561050c565b604051808215151515815260200191505060405180910390f35b34801561019b57600080fd5b506101a4610527565b6040518082815260200191505060405180910390f35b3480156101c657600080fd5b506101cf610531565b005b3480156101dd57600080fd5b506101e66105b1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561023457600080fd5b5061023d6105db565b005b34801561024b57600080fd5b50610254610718565b604051808215151515815260200191505060405180910390f35b34801561027a57600080fd5b506102e76004803603606081101561029157600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061072f565b005b3480156102f557600080fd5b506102fe610977565b6040518082815260200191505060405180910390f35b34801561032057600080fd5b506103576004803603604081101561033757600080fd5b810190808035906020019092919080359060200190929190505050610981565b005b61039b6004803603602081101561036f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506103f4565b005b3480156103a957600080fd5b506103b2610af3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600160336000828254019250508190555060006033549050600034905061041b8382610b1d565b600061042682610b3e565b905061043d82606954610b5c90919063ffffffff16565b60698190555061044d8482610b7d565b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f6faf93231a456e552dbc9961f58d9713ee4f2e69d15f1975b050ef0911053a7b8484604051808381526020018281526020019250505060405180910390a36104c48483610b8b565b6104cc610b8f565b6104d68483610bfa565b5050603354811415156104e857600080fd5b5050565b6000609d544211905090565b6000606854905090565b6000606954905090565b6000609c5442101580156105225750609d544211155b905090565b6000609d54905090565b60d060009054906101000a900460ff1615151561054d57600080fd5b6105556104ec565b151561056057600080fd5b600160d060006101000a81548160ff021916908315150217905550610583610bfe565b7f9270cc390c096600a1c17c44345a1ba689fafd99d97487b10cfccf86cf73183660405160405180910390a1565b6000606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060019054906101000a900460ff16806105fa57506105f9610c00565b5b8061061157506000809054906101000a900460ff16155b15156106ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001807f436f6e747261637420696e7374616e63652068617320616c726561647920626581526020017f656e20696e697469616c697a656400000000000000000000000000000000000081525060400191505060405180910390fd5b60008060019054906101000a900460ff1690506001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff021916908315150217905550600160338190555080600060016101000a81548160ff02191690831515021790555050565b600060d060009054906101000a900460ff16905090565b600060019054906101000a900460ff168061074e575061074d610c00565b5b8061076557506000809054906101000a900460ff16155b15156107ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001807f436f6e747261637420696e7374616e63652068617320616c726561647920626581526020017f656e20696e697469616c697a656400000000000000000000000000000000000081525060400191505060405180910390fd5b60008060019054906101000a900460ff1690506001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff02191690831515021790555060008411151561085657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561089257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156108ce57600080fd5b8360688190555082606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600060016101000a81548160ff02191690831515021790555050505050565b6000609c54905090565b600060019054906101000a900460ff16806109a0575061099f610c00565b5b806109b757506000809054906101000a900460ff16155b1515610a51576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001807f436f6e747261637420696e7374616e63652068617320616c726561647920626581526020017f656e20696e697469616c697a656400000000000000000000000000000000000081525060400191505060405180910390fd5b60008060019054906101000a900460ff1690506001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff021916908315150217905550610aa1610c11565b1515610aa957fe5b428310151515610ab857600080fd5b8282111515610ac657600080fd5b82609c8190555081609d8190555080600060016101000a81548160ff021916908315150217905550505050565b6000606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610b2561050c565b1515610b3057600080fd5b610b3a8282610cd3565b5050565b6000610b5560685483610d2390919063ffffffff16565b9050919050565b6000808284019050838110151515610b7357600080fd5b8091505092915050565b610b878282610d61565b5050565b5050565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610bf7573d6000803e3d6000fd5b50565b5050565b565b600080303b90506000811491505090565b600080606854118015610c735750600073ffffffffffffffffffffffffffffffffffffffff16606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b8015610cce5750600073ffffffffffffffffffffffffffffffffffffffff16606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610d0f57600080fd5b60008114151515610d1f57600080fd5b5050565b600080831415610d365760009050610d5b565b60008284029050828482811515610d4957fe5b04141515610d5657600080fd5b809150505b92915050565b610dae8282606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610db29092919063ffffffff16565b5050565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610e5557600080fd5b505af1158015610e69573d6000803e3d6000fd5b505050506040513d6020811015610e7f57600080fd5b81019080805190602001909291905050501515610e9b57600080fd5b50505056fea165627a7a723058209f5dd1982c91442c197dc06e35b65dbc99e892d3caa4544efc92b0158022c6830029",
  "deployedBytecode": "0x6080604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631515bc2b146100db5780632c4e722e1461010a5780634042b66f1461013557806347535d7b146101605780634b6753bc1461018f5780634bb278f3146101ba578063521eb273146101d15780638129fc1c14610228578063b3f05b971461023f578063b4988fd01461026e578063b7a8807c146102e9578063e4a3011614610314578063ec8ac4d814610359578063fc0c546a1461039d575b6100d9336103f4565b005b3480156100e757600080fd5b506100f06104ec565b604051808215151515815260200191505060405180910390f35b34801561011657600080fd5b5061011f6104f8565b6040518082815260200191505060405180910390f35b34801561014157600080fd5b5061014a610502565b6040518082815260200191505060405180910390f35b34801561016c57600080fd5b5061017561050c565b604051808215151515815260200191505060405180910390f35b34801561019b57600080fd5b506101a4610527565b6040518082815260200191505060405180910390f35b3480156101c657600080fd5b506101cf610531565b005b3480156101dd57600080fd5b506101e66105b1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561023457600080fd5b5061023d6105db565b005b34801561024b57600080fd5b50610254610718565b604051808215151515815260200191505060405180910390f35b34801561027a57600080fd5b506102e76004803603606081101561029157600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061072f565b005b3480156102f557600080fd5b506102fe610977565b6040518082815260200191505060405180910390f35b34801561032057600080fd5b506103576004803603604081101561033757600080fd5b810190808035906020019092919080359060200190929190505050610981565b005b61039b6004803603602081101561036f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506103f4565b005b3480156103a957600080fd5b506103b2610af3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600160336000828254019250508190555060006033549050600034905061041b8382610b1d565b600061042682610b3e565b905061043d82606954610b5c90919063ffffffff16565b60698190555061044d8482610b7d565b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f6faf93231a456e552dbc9961f58d9713ee4f2e69d15f1975b050ef0911053a7b8484604051808381526020018281526020019250505060405180910390a36104c48483610b8b565b6104cc610b8f565b6104d68483610bfa565b5050603354811415156104e857600080fd5b5050565b6000609d544211905090565b6000606854905090565b6000606954905090565b6000609c5442101580156105225750609d544211155b905090565b6000609d54905090565b60d060009054906101000a900460ff1615151561054d57600080fd5b6105556104ec565b151561056057600080fd5b600160d060006101000a81548160ff021916908315150217905550610583610bfe565b7f9270cc390c096600a1c17c44345a1ba689fafd99d97487b10cfccf86cf73183660405160405180910390a1565b6000606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060019054906101000a900460ff16806105fa57506105f9610c00565b5b8061061157506000809054906101000a900460ff16155b15156106ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001807f436f6e747261637420696e7374616e63652068617320616c726561647920626581526020017f656e20696e697469616c697a656400000000000000000000000000000000000081525060400191505060405180910390fd5b60008060019054906101000a900460ff1690506001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff021916908315150217905550600160338190555080600060016101000a81548160ff02191690831515021790555050565b600060d060009054906101000a900460ff16905090565b600060019054906101000a900460ff168061074e575061074d610c00565b5b8061076557506000809054906101000a900460ff16155b15156107ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001807f436f6e747261637420696e7374616e63652068617320616c726561647920626581526020017f656e20696e697469616c697a656400000000000000000000000000000000000081525060400191505060405180910390fd5b60008060019054906101000a900460ff1690506001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff02191690831515021790555060008411151561085657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561089257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156108ce57600080fd5b8360688190555082606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600060016101000a81548160ff02191690831515021790555050505050565b6000609c54905090565b600060019054906101000a900460ff16806109a0575061099f610c00565b5b806109b757506000809054906101000a900460ff16155b1515610a51576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001807f436f6e747261637420696e7374616e63652068617320616c726561647920626581526020017f656e20696e697469616c697a656400000000000000000000000000000000000081525060400191505060405180910390fd5b60008060019054906101000a900460ff1690506001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff021916908315150217905550610aa1610c11565b1515610aa957fe5b428310151515610ab857600080fd5b8282111515610ac657600080fd5b82609c8190555081609d8190555080600060016101000a81548160ff021916908315150217905550505050565b6000606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610b2561050c565b1515610b3057600080fd5b610b3a8282610cd3565b5050565b6000610b5560685483610d2390919063ffffffff16565b9050919050565b6000808284019050838110151515610b7357600080fd5b8091505092915050565b610b878282610d61565b5050565b5050565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610bf7573d6000803e3d6000fd5b50565b5050565b565b600080303b90506000811491505090565b600080606854118015610c735750600073ffffffffffffffffffffffffffffffffffffffff16606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b8015610cce5750600073ffffffffffffffffffffffffffffffffffffffff16606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610d0f57600080fd5b60008114151515610d1f57600080fd5b5050565b600080831415610d365760009050610d5b565b60008284029050828482811515610d4957fe5b04141515610d5657600080fd5b809150505b92915050565b610dae8282606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610db29092919063ffffffff16565b5050565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610e5557600080fd5b505af1158015610e69573d6000803e3d6000fd5b505050506040513d6020811015610e7f57600080fd5b81019080805190602001909291905050501515610e9b57600080fd5b50505056fea165627a7a723058209f5dd1982c91442c197dc06e35b65dbc99e892d3caa4544efc92b0158022c6830029",
  "sourceMap": "303:1017:8:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;303:1017:8;;;;;;;",
  "deployedSourceMap": "303:1017:8:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2955:21:7;2965:10;2955:9;:21::i;:::-;303:1017:8;1822:156:18;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1822:156:18;;;;;;;;;;;;;;;;;;;;;;;;;;;3366:75:7;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3366:75:7;;;;;;;;;;;;;;;;;;;;;;;3504:85;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3504:85:7;;;;;;;;;;;;;;;;;;;;;;;1469:189:18;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1469:189:18;;;;;;;;;;;;;;;;;;;;;;;;;;;1295:89;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1295:89:18;;;;;;;;;;;;;;;;;;;;;;;792:183:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;792:183:8;;;;;;3194:87:7;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3194:87:7;;;;;;;;;;;;;;;;;;;;;;;;;;;451:214:68;;8:9:-1;5:2;;;30:1;27;20:12;5:2;451:214:68;;;;;;552:82:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;552:82:8;;;;;;;;;;;;;;;;;;;;;;;;;;;2344:284:7;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2344:284:7;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2344:284:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1141:89:18;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1141:89:18;;;;;;;;;;;;;;;;;;;;;;;718:358;;8:9:-1;5:2;;;30:1;27;20:12;5:2;718:358:18;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;718:358:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3846:603:7;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3846:603:7;;;;;;;;;;;;;;;;;;;;;;3042:76;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3042:76:7;;;;;;;;;;;;;;;;;;;;;;;;;;;3846:603;1091:1:68;1074:13;;:18;;;;;;;;;;;1102:20;1125:13;;1102:36;;3924:17:7;3944:9;3924:29;;3963:44;3984:11;3997:9;3963:20;:44::i;:::-;4066:14;4083:26;4099:9;4083:15;:26::i;:::-;4066:43;;4157:25;4172:9;4157:10;;:14;;:25;;;;:::i;:::-;4144:10;:38;;;;4193:37;4210:11;4223:6;4193:16;:37::i;:::-;4273:11;4245:59;;4261:10;4245:59;;;4286:9;4297:6;4245:59;;;;;;;;;;;;;;;;;;;;;;;;4315:46;4338:11;4351:9;4315:22;:46::i;:::-;4372:15;:13;:15::i;:::-;4397:45;4419:11;4432:9;4397:21;:45::i;:::-;1148:1:68;;1183:13;;1167:12;:29;1159:38;;;;;;;;3846:603:7;;:::o;1822:156:18:-;1864:4;1959:12;;1941:15;:30;1934:37;;1822:156;:::o;3366:75:7:-;3403:7;3429:5;;3422:12;;3366:75;:::o;3504:85::-;3546:7;3572:10;;3565:17;;3504:85;:::o;1469:189:18:-;1508:4;1604:12;;1585:15;:31;;:66;;;;;1639:12;;1620:15;:31;;1585:66;1578:73;;1469:189;:::o;1295:89::-;1339:7;1365:12;;1358:19;;1295:89;:::o;792:183:8:-;838:10;;;;;;;;;;;837:11;829:20;;;;;;;;867:11;:9;:11::i;:::-;859:20;;;;;;;;903:4;890:10;;:17;;;;;;;;;;;;;;;;;;918:15;:13;:15::i;:::-;948:20;;;;;;;;;;792:183::o;3194:87:7:-;3233:15;3267:7;;;;;;;;;;;3260:14;;3194:87;:::o;451:214:68:-;1024:12:69;;;;;;;;;;;:31;;;;1040:15;:13;:15::i;:::-;1024:31;:47;;;;1060:11;;;;;;;;;;;1059:12;1024:47;1016:106;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1129:20;1152:12;;;;;;;;;;;1129:35;;1185:4;1170:12;;:19;;;;;;;;;;;;;;;;;;1209:4;1195:11;;:18;;;;;;;;;;;;;;;;;;657:1:68;641:13;:17;;;;1243:15:69;1228:12;;:30;;;;;;;;;;;;;;;;;;451:214:68;:::o;552:82:8:-;594:4;617:10;;;;;;;;;;;610:17;;552:82;:::o;2344:284:7:-;1024:12:69;;;;;;;;;;;:31;;;;1040:15;:13;:15::i;:::-;1024:31;:47;;;;1060:11;;;;;;;;;;;1059:12;1024:47;1016:106;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1129:20;1152:12;;;;;;;;;;;1129:35;;1185:4;1170:12;;:19;;;;;;;;;;;;;;;;;;1209:4;1195:11;;:18;;;;;;;;;;;;;;;;;;2460:1:7;2453:4;:8;2445:17;;;;;;;;2498:1;2480:20;;:6;:20;;;;2472:29;;;;;;;;2545:1;2519:28;;2527:5;2519:28;;;;2511:37;;;;;;;;2567:4;2559:5;:12;;;;2591:6;2581:7;;:16;;;;;;;;;;;;;;;;;;2616:5;2607:6;;:14;;;;;;;;;;;;;;;;;;1243:15:69;1228:12;;:30;;;;;;;;;;;;;;;;;;2344:284:7;;;;:::o;1141:89:18:-;1185:7;1211:12;;1204:19;;1141:89;:::o;718:358::-;1024:12:69;;;;;;;;;;;:31;;;;1040:15;:13;:15::i;:::-;1024:31;:47;;;;1060:11;;;;;;;;;;;1059:12;1024:47;1016:106;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1129:20;1152:12;;;;;;;;;;;1129:35;;1185:4;1170:12;;:19;;;;;;;;;;;;;;;;;;1209:4;1195:11;;:18;;;;;;;;;;;;;;;;;;816:31:18;:29;:31::i;:::-;809:39;;;;;;936:15;921:11;:30;;913:39;;;;;;;;984:11;970;:25;962:34;;;;;;;;1022:11;1007:12;:26;;;;1058:11;1043:12;:26;;;;1243:15:69;1228:12;;:30;;;;;;;;;;;;;;;;;;718:358:18;;;:::o;3042:76:7:-;3080:6;3105;;;;;;;;;;;3098:13;;3042:76;:::o;2302:165:18:-;503:8;:6;:8::i;:::-;495:17;;;;;;;;2410:50;2437:11;2450:9;2410:26;:50::i;:::-;2302:165;;:::o;7249:120:7:-;7316:7;7342:20;7356:5;;7342:9;:13;;:20;;;;:::i;:::-;7335:27;;7249:120;;;:::o;1431:145:33:-;1489:7;1508:9;1524:1;1520;:5;1508:17;;1548:1;1543;:6;;1535:15;;;;;;;;1568:1;1561:8;;;1431:145;;;;:::o;6451:134:7:-;6538:40;6553:11;6566;6538:14;:40::i;:::-;6451:134;;:::o;6855:145::-;;;:::o;7456:78::-;7500:7;;;;;;;;;;;:16;;:27;7517:9;7500:27;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7500:27:7;7456:78::o;5619:149::-;;;:::o;1184:98:8:-;:::o;1349:467:69:-;1396:4;1737:10;1782:7;1770:20;1764:26;;1810:1;1804:2;:7;1797:14;;;1349:467;:::o;4455:159:7:-;4509:4;4542:1;4534:5;;:9;4533:38;;;;;4568:1;4549:21;;:7;;;;;;;;;;;:21;;;;4533:38;:73;;;;;4603:1;4576:29;;4584:6;;;;;;;;;;;4576:29;;;;4533:73;4525:82;;4455:159;:::o;5156:168::-;5281:1;5258:25;;:11;:25;;;;5250:34;;;;;;;;5315:1;5302:9;:14;;5294:23;;;;;;;;5156:168;;:::o;229:421:33:-;287:7;532:1;527;:6;523:45;;;556:1;549:8;;;;523:45;578:9;594:1;590;:5;578:17;;622:1;617;613;:5;;;;;;;;:10;605:19;;;;;;;;642:1;635:8;;;229:421;;;;;:::o;6048:137:7:-;6133:45;6153:11;6166;6133:6;;;;;;;;;;;:19;;;;:45;;;;;:::i;:::-;6048:137;;:::o;409:123:48:-;499:5;:14;;;514:2;518:5;499:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;499:25:48;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;499:25:48;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;499:25:48;;;;;;;;;;;;;;;;491:34;;;;;;;;409:123;;;:::o",
  "source": "pragma solidity ^0.5.0;\n\nimport \"zos-lib/contracts/Initializable.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../validation/TimedCrowdsale.sol\";\n\n/**\n * @title FinalizableCrowdsale\n * @dev Extension of Crowdsale with a one-off finalization action, where one\n * can do extra work after finishing.\n */\ncontract FinalizableCrowdsale is Initializable, TimedCrowdsale {\n    using SafeMath for uint256;\n\n    bool private _finalized;\n\n    event CrowdsaleFinalized();\n\n    /**\n     * @return true if the crowdsale is finalized, false otherwise.\n     */\n    function finalized() public view returns (bool) {\n        return _finalized;\n    }\n\n    /**\n     * @dev Must be called after crowdsale ends, to do some extra finalization\n     * work. Calls the contract's finalization function.\n     */\n    function finalize() public {\n        require(!_finalized);\n        require(hasClosed());\n\n        _finalized = true;\n\n        _finalization();\n        emit CrowdsaleFinalized();\n    }\n\n    /**\n     * @dev Can be overridden to add finalization logic. The overriding function\n     * should call super._finalization() to ensure the chain of finalization is\n     * executed entirely.\n     */\n    function _finalization() internal {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    uint256[50] private ______gap;\n}\n",
  "sourcePath": "/home/frangio/zs/oz/zos/contracts/crowdsale/distribution/FinalizableCrowdsale.sol",
  "ast": {
    "absolutePath": "/home/frangio/zs/oz/zos/contracts/crowdsale/distribution/FinalizableCrowdsale.sol",
    "exportedSymbols": {
      "FinalizableCrowdsale": [
        1179
      ]
    },
    "id": 1180,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1124,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:8"
      },
      {
        "absolutePath": "zos-lib/contracts/Initializable.sol",
        "file": "zos-lib/contracts/Initializable.sol",
        "id": 1125,
        "nodeType": "ImportDirective",
        "scope": 1180,
        "sourceUnit": 8038,
        "src": "25:45:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/frangio/zs/oz/zos/contracts/math/SafeMath.sol",
        "file": "../../math/SafeMath.sol",
        "id": 1126,
        "nodeType": "ImportDirective",
        "scope": 1180,
        "sourceUnit": 3912,
        "src": "71:33:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/frangio/zs/oz/zos/contracts/crowdsale/validation/TimedCrowdsale.sol",
        "file": "../validation/TimedCrowdsale.sol",
        "id": 1127,
        "nodeType": "ImportDirective",
        "scope": 1180,
        "sourceUnit": 2169,
        "src": "105:42:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1128,
              "name": "Initializable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 8037,
              "src": "336:13:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Initializable_$8037",
                "typeString": "contract Initializable"
              }
            },
            "id": 1129,
            "nodeType": "InheritanceSpecifier",
            "src": "336:13:8"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1130,
              "name": "TimedCrowdsale",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2168,
              "src": "351:14:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_TimedCrowdsale_$2168",
                "typeString": "contract TimedCrowdsale"
              }
            },
            "id": 1131,
            "nodeType": "InheritanceSpecifier",
            "src": "351:14:8"
          }
        ],
        "contractDependencies": [
          1122,
          2168,
          7981,
          8037
        ],
        "contractKind": "contract",
        "documentation": "@title FinalizableCrowdsale\n@dev Extension of Crowdsale with a one-off finalization action, where one\ncan do extra work after finishing.",
        "fullyImplemented": true,
        "id": 1179,
        "linearizedBaseContracts": [
          1179,
          2168,
          1122,
          7981,
          8037
        ],
        "name": "FinalizableCrowdsale",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 1134,
            "libraryName": {
              "contractScope": null,
              "id": 1132,
              "name": "SafeMath",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3911,
              "src": "378:8:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SafeMath_$3911",
                "typeString": "library SafeMath"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "372:27:8",
            "typeName": {
              "id": 1133,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "391:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "constant": false,
            "id": 1136,
            "name": "_finalized",
            "nodeType": "VariableDeclaration",
            "scope": 1179,
            "src": "405:23:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 1135,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "405:4:8",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 1138,
            "name": "CrowdsaleFinalized",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1137,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "459:2:8"
            },
            "src": "435:27:8"
          },
          {
            "body": {
              "id": 1145,
              "nodeType": "Block",
              "src": "600:34:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1143,
                    "name": "_finalized",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1136,
                    "src": "617:10:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 1142,
                  "id": 1144,
                  "nodeType": "Return",
                  "src": "610:17:8"
                }
              ]
            },
            "documentation": "@return true if the crowdsale is finalized, false otherwise.",
            "id": 1146,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "finalized",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1139,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "570:2:8"
            },
            "returnParameters": {
              "id": 1142,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1141,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1146,
                  "src": "594:4:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1140,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "594:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "593:6:8"
            },
            "scope": 1179,
            "src": "552:82:8",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1169,
              "nodeType": "Block",
              "src": "819:156:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1151,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "837:11:8",
                        "subExpression": {
                          "argumentTypes": null,
                          "id": 1150,
                          "name": "_finalized",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1136,
                          "src": "838:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 1149,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        8055,
                        8056
                      ],
                      "referencedDeclaration": 8055,
                      "src": "829:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 1152,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "829:20:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1153,
                  "nodeType": "ExpressionStatement",
                  "src": "829:20:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 1155,
                          "name": "hasClosed",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2129,
                          "src": "867:9:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                            "typeString": "function () view returns (bool)"
                          }
                        },
                        "id": 1156,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "867:11:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 1154,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        8055,
                        8056
                      ],
                      "referencedDeclaration": 8055,
                      "src": "859:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 1157,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "859:20:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1158,
                  "nodeType": "ExpressionStatement",
                  "src": "859:20:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1161,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1159,
                      "name": "_finalized",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1136,
                      "src": "890:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "74727565",
                      "id": 1160,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "903:4:8",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "890:17:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1162,
                  "nodeType": "ExpressionStatement",
                  "src": "890:17:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 1163,
                      "name": "_finalization",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1174,
                      "src": "918:13:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 1164,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "918:15:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1165,
                  "nodeType": "ExpressionStatement",
                  "src": "918:15:8"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 1166,
                      "name": "CrowdsaleFinalized",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1138,
                      "src": "948:18:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 1167,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "948:20:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1168,
                  "nodeType": "EmitStatement",
                  "src": "943:25:8"
                }
              ]
            },
            "documentation": "@dev Must be called after crowdsale ends, to do some extra finalization\nwork. Calls the contract's finalization function.",
            "id": 1170,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "finalize",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1147,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "809:2:8"
            },
            "returnParameters": {
              "id": 1148,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "819:0:8"
            },
            "scope": 1179,
            "src": "792:183:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1173,
              "nodeType": "Block",
              "src": "1218:64:8",
              "statements": []
            },
            "documentation": "@dev Can be overridden to add finalization logic. The overriding function\nshould call super._finalization() to ensure the chain of finalization is\nexecuted entirely.",
            "id": 1174,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_finalization",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1171,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1206:2:8"
            },
            "returnParameters": {
              "id": 1172,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1218:0:8"
            },
            "scope": 1179,
            "src": "1184:98:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 1178,
            "name": "______gap",
            "nodeType": "VariableDeclaration",
            "scope": 1179,
            "src": "1288:29:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$50_storage",
              "typeString": "uint256[50]"
            },
            "typeName": {
              "baseType": {
                "id": 1175,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1288:7:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 1177,
              "length": {
                "argumentTypes": null,
                "hexValue": "3530",
                "id": 1176,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "1296:2:8",
                "subdenomination": null,
                "typeDescriptions": {
                  "typeIdentifier": null,
                  "typeString": null
                },
                "value": "50"
              },
              "nodeType": "ArrayTypeName",
              "src": "1288:11:8",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
                "typeString": "uint256[50]"
              }
            },
            "value": null,
            "visibility": "private"
          }
        ],
        "scope": 1180,
        "src": "303:1017:8"
      }
    ],
    "src": "0:1321:8"
  },
  "legacyAST": {
    "absolutePath": "/home/frangio/zs/oz/zos/contracts/crowdsale/distribution/FinalizableCrowdsale.sol",
    "exportedSymbols": {
      "FinalizableCrowdsale": [
        1179
      ]
    },
    "id": 1180,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1124,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:8"
      },
      {
        "absolutePath": "zos-lib/contracts/Initializable.sol",
        "file": "zos-lib/contracts/Initializable.sol",
        "id": 1125,
        "nodeType": "ImportDirective",
        "scope": 1180,
        "sourceUnit": 8038,
        "src": "25:45:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/frangio/zs/oz/zos/contracts/math/SafeMath.sol",
        "file": "../../math/SafeMath.sol",
        "id": 1126,
        "nodeType": "ImportDirective",
        "scope": 1180,
        "sourceUnit": 3912,
        "src": "71:33:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/frangio/zs/oz/zos/contracts/crowdsale/validation/TimedCrowdsale.sol",
        "file": "../validation/TimedCrowdsale.sol",
        "id": 1127,
        "nodeType": "ImportDirective",
        "scope": 1180,
        "sourceUnit": 2169,
        "src": "105:42:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1128,
              "name": "Initializable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 8037,
              "src": "336:13:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Initializable_$8037",
                "typeString": "contract Initializable"
              }
            },
            "id": 1129,
            "nodeType": "InheritanceSpecifier",
            "src": "336:13:8"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1130,
              "name": "TimedCrowdsale",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2168,
              "src": "351:14:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_TimedCrowdsale_$2168",
                "typeString": "contract TimedCrowdsale"
              }
            },
            "id": 1131,
            "nodeType": "InheritanceSpecifier",
            "src": "351:14:8"
          }
        ],
        "contractDependencies": [
          1122,
          2168,
          7981,
          8037
        ],
        "contractKind": "contract",
        "documentation": "@title FinalizableCrowdsale\n@dev Extension of Crowdsale with a one-off finalization action, where one\ncan do extra work after finishing.",
        "fullyImplemented": true,
        "id": 1179,
        "linearizedBaseContracts": [
          1179,
          2168,
          1122,
          7981,
          8037
        ],
        "name": "FinalizableCrowdsale",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 1134,
            "libraryName": {
              "contractScope": null,
              "id": 1132,
              "name": "SafeMath",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3911,
              "src": "378:8:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SafeMath_$3911",
                "typeString": "library SafeMath"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "372:27:8",
            "typeName": {
              "id": 1133,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "391:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "constant": false,
            "id": 1136,
            "name": "_finalized",
            "nodeType": "VariableDeclaration",
            "scope": 1179,
            "src": "405:23:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 1135,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "405:4:8",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 1138,
            "name": "CrowdsaleFinalized",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1137,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "459:2:8"
            },
            "src": "435:27:8"
          },
          {
            "body": {
              "id": 1145,
              "nodeType": "Block",
              "src": "600:34:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1143,
                    "name": "_finalized",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1136,
                    "src": "617:10:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 1142,
                  "id": 1144,
                  "nodeType": "Return",
                  "src": "610:17:8"
                }
              ]
            },
            "documentation": "@return true if the crowdsale is finalized, false otherwise.",
            "id": 1146,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "finalized",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1139,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "570:2:8"
            },
            "returnParameters": {
              "id": 1142,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1141,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1146,
                  "src": "594:4:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1140,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "594:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "593:6:8"
            },
            "scope": 1179,
            "src": "552:82:8",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1169,
              "nodeType": "Block",
              "src": "819:156:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1151,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "837:11:8",
                        "subExpression": {
                          "argumentTypes": null,
                          "id": 1150,
                          "name": "_finalized",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1136,
                          "src": "838:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 1149,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        8055,
                        8056
                      ],
                      "referencedDeclaration": 8055,
                      "src": "829:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 1152,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "829:20:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1153,
                  "nodeType": "ExpressionStatement",
                  "src": "829:20:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 1155,
                          "name": "hasClosed",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2129,
                          "src": "867:9:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                            "typeString": "function () view returns (bool)"
                          }
                        },
                        "id": 1156,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "867:11:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 1154,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        8055,
                        8056
                      ],
                      "referencedDeclaration": 8055,
                      "src": "859:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 1157,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "859:20:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1158,
                  "nodeType": "ExpressionStatement",
                  "src": "859:20:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1161,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1159,
                      "name": "_finalized",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1136,
                      "src": "890:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "74727565",
                      "id": 1160,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "903:4:8",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "890:17:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1162,
                  "nodeType": "ExpressionStatement",
                  "src": "890:17:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 1163,
                      "name": "_finalization",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1174,
                      "src": "918:13:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 1164,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "918:15:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1165,
                  "nodeType": "ExpressionStatement",
                  "src": "918:15:8"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 1166,
                      "name": "CrowdsaleFinalized",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1138,
                      "src": "948:18:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 1167,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "948:20:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1168,
                  "nodeType": "EmitStatement",
                  "src": "943:25:8"
                }
              ]
            },
            "documentation": "@dev Must be called after crowdsale ends, to do some extra finalization\nwork. Calls the contract's finalization function.",
            "id": 1170,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "finalize",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1147,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "809:2:8"
            },
            "returnParameters": {
              "id": 1148,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "819:0:8"
            },
            "scope": 1179,
            "src": "792:183:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1173,
              "nodeType": "Block",
              "src": "1218:64:8",
              "statements": []
            },
            "documentation": "@dev Can be overridden to add finalization logic. The overriding function\nshould call super._finalization() to ensure the chain of finalization is\nexecuted entirely.",
            "id": 1174,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_finalization",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1171,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1206:2:8"
            },
            "returnParameters": {
              "id": 1172,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1218:0:8"
            },
            "scope": 1179,
            "src": "1184:98:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 1178,
            "name": "______gap",
            "nodeType": "VariableDeclaration",
            "scope": 1179,
            "src": "1288:29:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$50_storage",
              "typeString": "uint256[50]"
            },
            "typeName": {
              "baseType": {
                "id": 1175,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1288:7:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 1177,
              "length": {
                "argumentTypes": null,
                "hexValue": "3530",
                "id": 1176,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "1296:2:8",
                "subdenomination": null,
                "typeDescriptions": {
                  "typeIdentifier": null,
                  "typeString": null
                },
                "value": "50"
              },
              "nodeType": "ArrayTypeName",
              "src": "1288:11:8",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
                "typeString": "uint256[50]"
              }
            },
            "value": null,
            "visibility": "private"
          }
        ],
        "scope": 1180,
        "src": "303:1017:8"
      }
    ],
    "src": "0:1321:8"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.0+commit.1d4f565a.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.0",
  "updatedAt": "2019-01-29T05:33:36.334Z",
  "devdoc": {
    "details": "Extension of Crowdsale with a one-off finalization action, where one can do extra work after finishing.",
    "methods": {
      "buyTokens(address)": {
        "details": "low level token purchase ***DO NOT OVERRIDE*** This function has a non-reentrancy guard, so it shouldn't be called by another `nonReentrant` function.",
        "params": {
          "beneficiary": "Recipient of the token purchase"
        }
      },
      "closingTime()": {
        "return": "the crowdsale closing time."
      },
      "finalize()": {
        "details": "Must be called after crowdsale ends, to do some extra finalization work. Calls the contract's finalization function."
      },
      "finalized()": {
        "return": "true if the crowdsale is finalized, false otherwise."
      },
      "hasClosed()": {
        "details": "Checks whether the period in which the crowdsale is open has already elapsed.",
        "return": "Whether crowdsale period has elapsed"
      },
      "initialize(uint256,address,address)": {
        "details": "The rate is the conversion between wei and the smallest and indivisible token unit. So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.",
        "params": {
          "rate": "Number of token units a buyer gets per wei",
          "token": "Address of the token being sold",
          "wallet": "Address where collected funds will be forwarded to"
        }
      },
      "initialize(uint256,uint256)": {
        "details": "Constructor, takes crowdsale opening and closing times.",
        "params": {
          "closingTime": "Crowdsale closing time",
          "openingTime": "Crowdsale opening time"
        }
      },
      "isOpen()": {
        "return": "true if the crowdsale is open, false otherwise."
      },
      "openingTime()": {
        "return": "the crowdsale opening time."
      },
      "rate()": {
        "return": "the number of token units a buyer gets per wei."
      },
      "token()": {
        "return": "the token being sold."
      },
      "wallet()": {
        "return": "the address where funds are collected."
      },
      "weiRaised()": {
        "return": "the amount of wei raised."
      }
    },
    "title": "FinalizableCrowdsale"
  },
  "userdoc": {
    "methods": {}
  }
}